#pragma once

#include <math/seadVector.h>

#include "al/Library/Scene/IUseSceneObjHolder.h"
#include "al/Library/Scene/GameDataHolderBase.h"
#include "al/Library/LiveActor/LiveActor.h"
#include "al/Library/Layout/LayoutActor.h"
#include "al/Library/Scene/Scene.h"

#include "game/System/GameDataHolder.h"

class GameDataHolderWriter;
class GameDataHolderAccessor;
class ChangeStageInfo;
class RiseMapPartsHolder;
class ShineInfo;
class Shine;
class QuestInfo;
class SessionEventProgress;
class WorldTravelingNpc;
class BindInfo;
class ScenarioStartCamera;

namespace al {
    class CameraTicket;
}

namespace nn::g3d {
    class ResFile;
}

namespace GameDataFunction {
    void getGameDataHolder(al::IUseSceneObjHolder const*);
    void getGameDataHolder(al::SceneObjHolder const*);
    void getGameDataHolder(al::GameDataHolderBase*);
    void getGameDataFile(GameDataHolderWriter);
    void setPlayingFileId(GameDataHolderWriter, int);
    void initializeData(GameDataHolderWriter, int);
    bool isPlayDemoOpening(GameDataHolderAccessor);
    bool isGameClear(GameDataHolderAccessor);
    void setRequireSave(GameDataHolderWriter);
    void setRequireSaveFrame(GameDataHolderWriter);
    void getPlayTimeTotal(GameDataHolderAccessor);
    void getPlayTimeAcrossFile(GameDataHolderAccessor);
    void getSaveDataIdForPrepo(GameDataHolderAccessor);
    void startDemoStage(GameDataHolderWriter, char const*);
    void tryChangeNextStage(GameDataHolderWriter, ChangeStageInfo const*);
    void tryChangeNextStageWithStartRaceFlag(GameDataHolderWriter, ChangeStageInfo const*);
    void tryChangeNextStageWithStartRaceYukimaru(GameDataHolderWriter, ChangeStageInfo const*);
    void tryChangeNextStageWithDemoWorldWarp(GameDataHolderWriter, char const*);
    void tryChangeNextStageWithWorldWarpHole(GameDataHolderWriter, char const*);
    void changeNextStageWithStartTimeBalloon(GameDataHolderWriter, int);
    void getCurrentStageName(GameDataHolderAccessor);
    void changeNextStageWithEndTimeBalloon(GameDataHolderWriter);
    void changeNextStageWithCloset(GameDataHolderWriter);
    void findAreaAndChangeNextStage(GameDataHolderWriter, al::LiveActor const*, sead::Vector3<float> const*);
    void returnPrevStage(GameDataHolderWriter);
    bool isTimeBalloonSequence(GameDataHolderAccessor);
    void getNextStageName(GameDataHolderAccessor);
    void getCurrentStageName(GameDataHolderAccessor, int);
    bool isSeaOfTreeStage(GameDataHolderAccessor);
    void getNextStageName(GameDataHolderAccessor, int);
    void calcNextScenarioNo(GameDataHolderAccessor);
    void restartStage(GameDataHolderWriter);
    void missAndRestartStage(GameDataHolderWriter);
    bool isMissEndPrevStageForInit(GameDataHolderAccessor);
    bool isMissEndPrevStageForSceneDead(GameDataHolderAccessor);
    void reenterStage(GameDataHolderWriter);
    void getNextWorldId(GameDataHolderAccessor);
    void getPrevWorldId(GameDataHolderAccessor);
    void getWorldNumForNewReleaseShop(GameDataHolderAccessor);
    bool isAlreadyGoWorld(GameDataHolderAccessor, int);
    void getWorldDevelopName(GameDataHolderAccessor, int);
    void getWorldIdForNewReleaseShop(GameDataHolderAccessor, int);
    bool isForwardWorldWarpDemo(GameDataHolderAccessor);
    void getWorldNum(GameDataHolderAccessor);
    bool isFirstTimeNextWorld(GameDataHolderAccessor);
    void checkIsNewWorldInAlreadyGoWorld(GameDataHolderAccessor);
    void getCurrentWorldIdNoDevelop(GameDataHolderAccessor);
    void getScenarioNo(al::LiveActor const*);
    void getScenarioNo(al::LayoutActor const*);
    void getScenarioNoPlacement(GameDataHolderAccessor);
    bool isEqualScenario(RiseMapPartsHolder const*, int);
    void getMainQuestMin(al::LiveActor const*);
    void getCurrentWorldId(GameDataHolderAccessor);
    void clearStartId(GameDataHolderWriter);
    void setCheckpointId(GameDataHolderWriter, al::PlacementId const*);
    void setRestartPointId(GameDataHolderWriter, al::PlacementId const*);
    void tryGetRestartPointIdString(GameDataHolderAccessor);
    void tryGetPlayerStartId(GameDataHolderAccessor);
    bool isPlayerStartObj(al::LiveActor const*, al::ActorInitInfo const&);
    bool isPlayerStartObj(al::LiveActor const*, al::PlacementInfo const&);
    bool isPlayerStartObj(al::LiveActor const*, char const*);
    bool isPlayerStartLinkedObj(al::LiveActor const*, al::ActorInitInfo const&, char const*);
    void setStartShine(al::LiveActor const*, ShineInfo const*);
    void getStartShineNextIndex(GameDataHolderAccessor);
    bool isAlreadyShowExplainCheckpointFlag(GameDataHolderAccessor);
    bool isEnableShowExplainCheckpointFlag(GameDataHolderAccessor);
    void showExplainCheckpointFlag(GameDataHolderAccessor);
    void getLifeMaxUpItem(al::LiveActor const*);
    void getPlayerHitPoint(GameDataHolderAccessor);
    void getPlayerHitPointMaxCurrent(GameDataHolderAccessor);
    void getPlayerHitPointMaxNormal(GameDataHolderAccessor);
    bool isPlayerHitPointMax(GameDataHolderAccessor);
    bool isPlayerHitPointMaxWithItem(GameDataHolderAccessor);
    void recoveryPlayer(al::LiveActor const*);
    void recoveryPlayerForDebug(al::LiveActor const*);
    void recoveryPlayerMax(al::LiveActor const*);
    void recoveryPlayerForSystem(GameDataHolder const*);
    void recoveryPlayerMaxForSystem(GameDataHolder const*);
    void initPlayerHitPointForSystem(GameDataHolder const*);
    void damagePlayer(GameDataHolderWriter);
    void killPlayer(GameDataHolderWriter);
    bool isPlayerLifeZero(GameDataHolderAccessor);
    bool isGotShine(GameDataHolderAccessor, ShineInfo const*);
    bool isGotShine(GameDataHolderAccessor, al::PlacementId const*);
    bool isGotShine(GameDataHolderAccessor, char const*, char const*);
    bool isGotShine(GameDataHolderAccessor, int);
    bool isGotShine(Shine const*);
    void setGotShine(GameDataHolderWriter, ShineInfo const*);
    void getGotShineNum(GameDataHolderAccessor, int);
    void getLatestGetShineInfo(GameDataHolderAccessor);
    void getCurrentShineNum(GameDataHolderAccessor);
    void getTotalShineNum(GameDataHolderAccessor, int);
    void getTotalShopShineNum(GameDataHolderAccessor, int);
    void tryGetNextMainScenarioLabel(sead::BufferedSafeStringBase<char>*, sead::BufferedSafeStringBase<char>*, al::IUseSceneObjHolder const*);
    void getMainScenarioNumMax(GameDataHolderAccessor);
    void setMainScenarioNo(GameDataHolderWriter, int);
    void tryGetNextMainScenarioPos(sead::Vector3<float>*, GameDataHolderAccessor);
    bool isPlayScenarioCamera(GameDataHolderAccessor, QuestInfo const*);
    bool isPlayAlreadyScenarioStartCamera(GameDataHolderAccessor, int);
    bool isEnterStageFirst(GameDataHolderAccessor);
    bool isNextMainShine(GameDataHolderAccessor, int);
    bool isMainShine(GameDataHolderAccessor, int);
    bool isLatestGetMainShine(GameDataHolderAccessor, ShineInfo const*);
    void tryFindLinkedShineIndex(al::LiveActor const*, al::ActorInitInfo const&);
    void tryFindLinkedShineIndex(al::LiveActor const*, al::ActorInitInfo const&, int);
    void tryFindLinkedShineIndexByLinkName(al::LiveActor const*, al::ActorInitInfo const&, char const*);
    void calcLinkedShineNum(al::LiveActor const*, al::ActorInitInfo const&);
    void tryFindShineIndex(al::LiveActor const*, al::ActorInitInfo const&);
    void tryFindShineIndex(al::LiveActor const*, char const*, char const*);
    void tryFindShineUniqueId(al::Scene const*, ShineInfo const*);
    void disableHintByShineIndex(al::LiveActor const*, int);
    void enableHintByShineIndex(al::LiveActor const*, int);
    void calcIsGetMainShineAll(al::IUseSceneObjHolder const*);
    void calcIsGetShineAllInWorld(GameDataHolderAccessor, int);
    void calcIsGetShineAllInAllWorld(GameDataHolderAccessor);
    void tryFindAndInitShineInfoByOptionalId(ShineInfo*, GameDataHolderAccessor, char const*);
    bool isGotLinkedShineBeforeInitActor(al::ActorInitInfo const&, char const*);
    void checkIsComplete(al::IUseSceneObjHolder const*, int);
    bool isExistInHackDictionary(GameDataHolderAccessor, char const*, int);
    void getCollectedBgmNum(GameDataHolderAccessor, int);
    void getCollectedBgmMaxNum(GameDataHolderWriter);
    bool isEnableOpenMoonRock(al::LiveActor const*);
    void openMoonRock(al::LiveActor const*, al::PlacementId const*);
    bool isOpenMoonRock(GameDataHolderAccessor);
    bool isEnableShowDemoOpenMoonRockFirst(GameDataHolderAccessor);
    bool isEnableShowDemoOpenMoonRockWorld(GameDataHolderAccessor);
    void showDemoOpenMoonRockFirst(GameDataHolderAccessor);
    void showDemoOpenMoonRockWorld(GameDataHolderAccessor);
    void calcMoonRockTalkMessageIndex(GameDataHolderAccessor);
    void addMoonRockTalkMessageIndex(GameDataHolderWriter);
    bool isAppearedMoonRockTalkMessage(GameDataHolderAccessor);
    void addPayShine(GameDataHolderWriter, int);
    void addPayShineCurrentAll(GameDataHolderWriter);
    void getPayShineNum(GameDataHolderAccessor);
    void getPayShineNum(GameDataHolderAccessor, int);
    void getTotalPayShineNum(GameDataHolderAccessor);
    void getTotalPayShineNumClamp(GameDataHolderAccessor);
    bool isPayShineAllInAllWorld(GameDataHolderAccessor);
    void addKey(GameDataHolderWriter, int);
    void getKeyNum(GameDataHolderAccessor);
    void getCurrentKeyNum(GameDataHolderAccessor);
    void getOpenDoorLockNum(GameDataHolderAccessor);
    void openDoorLock(GameDataHolderWriter, al::PlacementId const*);
    bool isOpenDoorLock(GameDataHolderAccessor, al::PlacementId const*);
    void setObjStarted(GameDataHolder*, al::PlacementId const*);
    bool isObjStarted(GameDataHolder const*, al::PlacementId const*);
    bool isObjStarted(GameDataHolderAccessor, char const*, char const*);
    void saveObjS32(GameDataHolderWriter, al::PlacementId const*, int);
    void tryFindSaveObjS32Value(int*, GameDataHolderAccessor, al::PlacementId const*);
    void onObjNoWriteSaveData(GameDataHolderWriter, al::PlacementId const*);
    void offObjNoWriteSaveData(GameDataHolderWriter, al::PlacementId const*);
    bool isOnObjNoWriteSaveData(GameDataHolderAccessor, al::PlacementId const*);
    void onObjNoWriteSaveDataResetMiniGame(GameDataHolderWriter, al::PlacementId const*);
    void offObjNoWriteSaveDataResetMiniGame(GameDataHolderWriter, al::PlacementId const*);
    bool isOnObjNoWriteSaveDataResetMiniGame(GameDataHolderAccessor, al::PlacementId const*);
    void onObjNoWriteSaveDataInSameScenario(GameDataHolder*, al::PlacementId const*);
    bool isOnObjNoWriteSaveDataInSameScenario(GameDataHolder const*, al::PlacementId const*);
    void setSessionEventProgress(GameDataHolderWriter, SessionEventProgress const&);
    void getSessionEventProgress(GameDataHolderAccessor);
    bool isPayCoinToSphinx(al::LiveActor const*);
    void payCoinToSphinx(al::LiveActor const*);
    bool isRemovedCapByJango(al::LiveActor const*);
    bool isMainStage(GameDataHolderAccessor);
    bool isGetCapFromJango(al::LiveActor const*);
    void removeCapByJango(al::LiveActor const*);
    void getCapFromJango(al::LiveActor const*);
    void addJangoCount(al::LiveActor const*);
    void getJangoCount(al::LiveActor const*);
    bool isFirstWorldTravelingStatus(WorldTravelingNpc const*);
    void saveWorldTravelingStatus(WorldTravelingNpc const*, char const*);
    void getWorldTravelingStatus(WorldTravelingNpc const*);
    bool isRaceStart(GameDataHolderAccessor);
    bool isRaceStartFlag(GameDataHolderAccessor);
    bool isRaceStartYukimaru(GameDataHolderAccessor);
    bool isRaceStartYukimaruTutorial(GameDataHolderAccessor);
    bool isRaceWin(GameDataHolderAccessor);
    bool isRaceWin(GameDataHolderAccessor, int);
    bool isRaceResultSecond(GameDataHolderAccessor);
    bool isRaceResultThird(GameDataHolderAccessor);
    bool isRaceLose(GameDataHolderAccessor);
    bool isRaceCancel(GameDataHolderAccessor);
    void winRace(GameDataHolderWriter);
    void endRaceResultSecond(GameDataHolderWriter);
    void endRaceResultThird(GameDataHolderWriter);
    void loseRace(GameDataHolderWriter);
    void getRaceRivalLevel(al::LiveActor const*);
    void getRaceRivalLevel(al::Scene const*);
    void setRaceRivalLevel(al::LiveActor const*, int);
    void setLastRaceRanking(GameDataHolderAccessor, int);
    void getLastRaceRanking(GameDataHolderWriter);
    void incrementRaceLoseCount(al::Scene const*, int);
    void getRaceLoseCount(al::LiveActor const*, int);
    void addCoinCollect(GameDataHolderWriter, al::PlacementId const*);
    void useCoinCollect(GameDataHolderWriter, int);
    bool isGotCoinCollect(GameDataHolderAccessor, al::ActorInitInfo const&);
    void getCoinCollectNum(GameDataHolderAccessor);
    void getCoinCollectGotNum(GameDataHolderAccessor);
    void getCoinCollectGotNum(GameDataHolderAccessor, int);
    void getCoinCollectNumMax(GameDataHolderAccessor);
    void getCoinCollectNumMax(GameDataHolderAccessor, int);
    void tryFindExistCoinCollectStagePosExcludeHomeStageInCurrentWorld(sead::Vector3<float>*, char const**, GameDataHolderAccessor);
    void getWorldScenarioNo(GameDataHolderAccessor, int);
    void addCoin(GameDataHolderWriter, int);
    void subCoin(GameDataHolderWriter, int);
    void getCoinNum(GameDataHolderAccessor);
    void getTotalCoinNum(GameDataHolderAccessor);
    bool isAppearCourseName(GameDataHolderAccessor);
    void setStageHakoniwa(GameDataHolderWriter);
    bool isEnableCheckpointWarp(GameDataHolderAccessor);
    void validateCheckpointWarp(GameDataHolderWriter);
    void invalidateCheckpointWarp(GameDataHolderWriter);
    void getCheckpointNumMaxInWorld(GameDataHolderAccessor);
    void getCheckpointTransInWorld(GameDataHolderAccessor, int);
    void getCheckpointObjIdInWorld(GameDataHolderAccessor, int);
    void getCheckpointTransInWorld(GameDataHolderAccessor, char const*);
    bool isGotCheckpointInWorld(GameDataHolderAccessor, int);
    bool isGotCheckpoint(GameDataHolderAccessor, al::PlacementId*);
    void calcGotCheckpointNumInWorld(GameDataHolderAccessor);
    void changeNextSceneByGotCheckpoint(GameDataHolderWriter, int);
    void changeNextSceneByHome(GameDataHolderWriter);
    bool isWarpCheckpoint(GameDataHolderAccessor);
    void getCheckpointWarpObjId(GameDataHolderAccessor);
    void registerCheckpointTrans(GameDataHolderWriter, al::PlacementId const*, sead::Vector3<float> const&);
    bool isEnableUnlockHint(GameDataHolderAccessor);
    void unlockHint(GameDataHolderWriter);
    void unlockHintAmiibo(GameDataHolderWriter);
    void calcHintNum(GameDataHolderAccessor);
    void calcRestHintNum(GameDataHolderAccessor);
    void checkExistHint(GameDataHolderAccessor);
    void getHintNumMax(GameDataHolderAccessor);
    void calcHintTrans(GameDataHolderAccessor, int);
    void getLatestHintTrans(GameDataHolderAccessor);
    void checkLatestHintSeaOfTree(GameDataHolderAccessor);
    void calcHintMoonRockNum(GameDataHolderAccessor);
    void getHintMoonRockNumMax(GameDataHolderAccessor);
    void calcHintMoonRockTrans(GameDataHolderAccessor, int);
    void initializeHintList(GameDataHolderWriter);
    void calcHintTransMostEasy(GameDataHolderAccessor);
    void calcHintTransMostNear(sead::Vector3<float>*, GameDataHolderAccessor, sead::Vector3<float> const&);
    void checkHintSeaOfTree(GameDataHolderAccessor, int);
    void checkHintSeaOfTreeMoonRock(GameDataHolderAccessor, int);
    void findUnlockShineNum(bool*, GameDataHolderAccessor);
    void findUnlockShineNumByWorldId(bool*, GameDataHolderAccessor, int);
    bool isUnlockedWorld(GameDataHolderAccessor, int);
    bool isUnlockedNextWorld(GameDataHolderAccessor);
    bool isUnlockedAllWorld(GameDataHolderAccessor);
    void getWorldIndexSpecial2(void);
    bool isUnlockedCurrentWorld(GameDataHolderAccessor);
    bool isCollectShineForNextWorldAndNotUnlockNextWorld(al::LiveActor const*);
    void getMainStageName(GameDataHolderAccessor, int);
    void tryGetCurrentMainStageName(GameDataHolderAccessor);
    void tryGetWorldName(al::LayoutActor const*, int);
    void tryGetWorldNameCurrent(al::LayoutActor const*);
    void tryGetRegionNameCurrent(al::LayoutActor const*);
    void getWorldDevelopNameCurrent(GameDataHolderAccessor);
    void getWorldScenarioNum(GameDataHolderAccessor, int);
    void findMainStageNameByDevelopName(GameDataHolderAccessor, char const*);
    void findWorldIdByDevelopName(GameDataHolderAccessor, char const*);
    void tryFindWorldIdByMainStageName(al::Scene const*, char const*);
    void tryFindWorldIdByMainStageName(al::IUseSceneObjHolder const*, char const*);
    void checkEnableUnlockWorldSpecial1(al::LiveActor const*);
    void getWorldIndexSpecial1(void);
    void checkEnableUnlockWorldSpecial2(al::LiveActor const*);
    void tryGetWorldNameByFileId(al::LayoutActor const*, int);
    bool isNewSaveDataByFileId(al::LayoutActor const*, int);
    void getLastUpdateFileTime(al::LayoutActor const*, int);
    void makeTextureSaveDataFileName(sead::BufferedSafeStringBase<char>*, nn::g3d::ResFile const*, GameDataHolder const*, int);
    void getWorldIndexPeach(void);
    void getWorldIndexCity(void);
    bool isCityWorldCeremonyAll(int, int);
    void getWorldIndexSea(void);
    void unlockWorld(GameDataHolderWriter, int);
    void getUnlockWorldIdForWorldMap(al::LayoutActor const*, int);
    void getUnlockWorldIdForWorldMap(al::LiveActor const*, int);
    void getUnlockWorldIdForWorldMap(al::Scene const*, int);
    void getUnlockWorldIdForWorldMap(GameDataHolder const*, int);
    void getUnlockWorldNumForWorldMap(al::Scene const*);
    void getUnlockWorldNumForWorldMap(al::LiveActor const*);
    void getUnlockWorldNumForWorldMap(al::LayoutActor const*);
    void calcNextLockedWorldIdForWorldMap(al::LayoutActor const*, int);
    void calcNextLockedWorldIdForWorldMap(al::Scene const*, int);
    void calcNextLockedWorldNumForWorldMap(al::Scene const*);
    void calcNextLockedWorldNumForWorldMap(al::LayoutActor const*);
    void getWorldIdForShineList(al::LayoutActor const*, int);
    void calcWorldNumForShineList(al::LayoutActor const*);
    void getLatestUnlockWorldIdForShineTowerMeter(al::LiveActor const*);
    bool isClearSandWorldScenario1(al::Scene const*);
    bool isClearCityWorldScenario1(al::Scene const*);
    bool isClearSkyWorldScenario1(al::Scene const*);
    bool isCityWorldScenario2(al::IUseSceneObjHolder const*);
    bool isWorldCity(GameDataHolderAccessor);
    void calcNextWorldId(GameDataHolderAccessor);
    bool isPlayDemoWorldWarp(GameDataHolderAccessor);
    bool isPlayDemoWorldWarpHole(GameDataHolderAccessor);
    void noPlayDemoWorldWarp(GameDataHolderWriter);
    bool isPlayDemoReturnToHome(GameDataHolderAccessor);
    void requestPlayDemoReturnToHome(GameDataHolderWriter);
    bool isPlayDemoAwardSpecial(GameDataHolderAccessor);
    void requestPlayDemoAwardSpecial(GameDataHolderWriter);
    bool isPlayDemoLavaErupt(GameDataHolderAccessor);
    bool isPlayDemoPlayerDownForBattleKoopaAfter(GameDataHolderAccessor);
    void disablePlayDemoPlayerDownForBattleKoopaAfter(GameDataHolderWriter);
    void enteredStage(GameDataHolderWriter);
    void getCurrentCostumeTypeName(GameDataHolderAccessor);
    void getCurrentCapTypeName(GameDataHolderAccessor);
    void wearCostume(GameDataHolderWriter, char const*);
    void wearCap(GameDataHolderWriter, char const*);
    void wearCostumeRandom(al::IUseSceneObjHolder*);
    void wearCapRandom(al::IUseSceneObjHolder*);
    void tryWearCostumeRandomIfEnable(al::IUseSceneObjHolder*);
    bool isCostumeRandomMode(al::IUseSceneObjHolder*);
    void tryWearCapRandomIfEnable(al::IUseSceneObjHolder*);
    bool isCapRandomMode(al::IUseSceneObjHolder*);
    void setCostumeRandomMode(al::IUseSceneObjHolder*);
    void setCapRandomMode(al::IUseSceneObjHolder*);
    void resetCostumeRandomMode(al::IUseSceneObjHolder*);
    void resetCapRandomMode(al::IUseSceneObjHolder*);
    void getShopItemInfoList(GameDataHolderAccessor);
    bool isExistHackObjInfo(GameDataHolderAccessor, char const*);
    void getHackObjInfo(GameDataHolderAccessor, char const*);
    void addHackDictionary(GameDataHolderWriter, char const*);
    bool isExistInHackDictionary(GameDataHolderAccessor, char const*);
    bool isShowHackTutorial(GameDataHolderAccessor, char const*, char const*);
    void setShowHackTutorial(GameDataHolderWriter, char const*, char const*);
    bool isShowBindTutorial(GameDataHolderAccessor, BindInfo const&);
    void setShowBindTutorial(GameDataHolderWriter, BindInfo const&);
    bool isGotShine(GameDataHolderAccessor, int, int);
    bool isOpenShineName(al::LayoutActor const*, int, int);
    void checkAchievementShine(al::LayoutActor const*, int, int);
    void calcShineNumInOneShine(al::LayoutActor const*, int, int);
    void tryFindShineMessage(al::LayoutActor const*, int, int);
    void tryFindShineMessage(al::LiveActor const*, al::IUseMessageSystem const*, int, int);
    void findShineGetTime(al::LayoutActor const*, int, int);
    void checkMoonRockShineForShineList(al::LayoutActor const*, int, int);
    void checkUnlockHintByHintNpcForShineList(al::LayoutActor const*, int, int);
    void checkUnlockHintByAmiiboForShineList(al::LayoutActor const*, int, int);
    void checkShineSeaOfTreeForShineList(al::LayoutActor const*, int, int);
    void getWorldTotalShineNum(GameDataHolderAccessor, int);
    void getWorldTotalShineNumMax(GameDataHolderAccessor, int);
    void findShineTrans(sead::Vector3<float>*, GameDataHolderAccessor, int, int);
    void getHomeTrans(GameDataHolderAccessor);
    bool isExistHome(GameDataHolderAccessor);
    bool isActivateHome(GameDataHolderAccessor);
    void getMiniGameNum(GameDataHolderAccessor);
    void getMiniGameNumMax(GameDataHolderAccessor);
    void getMiniGameTrans(GameDataHolderAccessor, int);
    void getMiniGameName(GameDataHolderAccessor, int);
    void getRaceStartTrans(GameDataHolderAccessor);
    void getRaceGoalTrans(GameDataHolderAccessor);
    void getHintNpcTrans(GameDataHolderAccessor);
    void getShopNpcTrans(GameDataHolderAccessor, int);
    bool isShopSellout(GameDataHolderAccessor, int);
    void calcShopNum(GameDataHolderAccessor);
    void getShopNpcIconNumMax(GameDataHolderAccessor);
    bool isExistRaceStartNpc(GameDataHolderAccessor);
    bool isExistHintNpc(GameDataHolderAccessor);
    void getCurrentMapView(GameDataHolderAccessor);
    bool isExistJango(GameDataHolderAccessor);
    void getJangoTrans(GameDataHolderAccessor);
    bool isExistAmiiboNpc(GameDataHolderAccessor);
    void getAmiiboNpcTrans(GameDataHolderAccessor);
    bool isInInvalidOpenMapStage(GameDataHolderAccessor);
    void getStageMapPlayerPos(GameDataHolderAccessor);
    bool isExistTimeBalloonNpc(GameDataHolderAccessor);
    void getTimeBalloonNpcTrans(GameDataHolderAccessor);
    bool isExistPoetter(GameDataHolderAccessor);
    void getPoetterTrans(GameDataHolderAccessor);
    void getMoonRockTrans(GameDataHolderAccessor);
    void setHomeTrans(al::LiveActor const*, sead::Vector3<float> const&);
    void setRaceStartNpcTrans(al::LiveActor const*);
    void setRaceStartTrans(al::LiveActor const*);
    void setRaceGoalTrans(al::LiveActor const*);
    void setHintNpcTrans(al::LiveActor const*);
    void setJangoTrans(al::LiveActor const*);
    void disableJangoTrans(al::LiveActor const*);
    void setAmiiboNpcTrans(al::LiveActor const*);
    void setShopNpcTrans(al::LiveActor const*, char const*, int);
    void setShopNpcTrans(GameDataHolderAccessor, al::PlacementInfo const&);
    void setMiniGameInfo(GameDataHolderAccessor, al::PlacementInfo const&);
    void setTimeBalloonTrans(GameDataHolderAccessor, sead::Vector3<float> const&);
    void setPoetterTrans(GameDataHolderAccessor, sead::Vector3<float> const&);
    void setStageMapPlayerPos(GameDataHolderWriter, sead::Vector3<float> const&);
    void setMoonRockTrans(GameDataHolderWriter, sead::Vector3<float> const&);
    void getHomeLevel(GameDataHolderAccessor);
    void upHomeLevel(GameDataHolderWriter);
    void activateHome(GameDataHolderWriter);
    bool isLaunchHome(GameDataHolderAccessor);
    void launchHome(GameDataHolderWriter);
    bool isCrashHome(GameDataHolderAccessor);
    void crashHome(GameDataHolderWriter);
    bool isRepairHome(GameDataHolderAccessor);
    void repairHome(GameDataHolderWriter);
    bool isBossAttackedHome(GameDataHolderAccessor);
    void bossAttackHome(GameDataHolderWriter);
    bool isRepairHomeByCrashedBoss(GameDataHolderAccessor);
    void repairHomeByCrashedBoss(GameDataHolderWriter);
    bool isFindKoopaNext(GameDataHolderAccessor, int);
    bool isBossAttackedHomeNext(GameDataHolderAccessor, int);
    bool isFindKoopa(GameDataHolderAccessor);
    void findKoopa(GameDataHolderWriter);
    bool isEnableCap(GameDataHolderAccessor);
    bool isMeetCap(GameDataHolderAccessor);
    void enableCap(GameDataHolderWriter);
    void disableCapByPlacement(al::LiveActor const*);
    bool isTalkedCapNearHomeInWaterfall(al::LiveActor const*);
    void talkCapNearHomeInWaterfall(al::LiveActor const*);
    bool isFlagOnTalkMessageInfo(al::IUseSceneObjHolder const*, int);
    void onFlagTalkMessageInfo(al::IUseSceneObjHolder const*, int);
    void getWorldIndexHat(void);
    void getWorldIndexWaterfall(void);
    void getWorldIndexSand(void);
    void getWorldIndexForest(void);
    void getWorldIndexLake(void);
    void getWorldIndexCloud(void);
    void getWorldIndexClash(void);
    void getWorldIndexSnow(void);
    void getWorldIndexLava(void);
    void getWorldIndexBoss(void);
    void getWorldIndexSky(void);
    void getWorldIndexMoon(void);
    bool isWorldCap(GameDataHolderAccessor);
    bool isWorldWaterfall(GameDataHolderAccessor);
    bool isWorldSand(GameDataHolderAccessor);
    bool isWorldForest(GameDataHolderAccessor);
    bool isWorldLake(GameDataHolderAccessor);
    bool isWorldCloud(GameDataHolderAccessor);
    bool isWorldClash(GameDataHolderAccessor);
    bool isWorldSnow(GameDataHolderAccessor);
    bool isWorldSea(GameDataHolderAccessor);
    bool isWorldBoss(GameDataHolderAccessor);
    bool isWorldSky(GameDataHolderAccessor);
    bool isWorldMoon(GameDataHolderAccessor);
    bool isWorldPeach(GameDataHolderAccessor);
    bool isWorldSpecial1(GameDataHolderAccessor);
    bool isWorldSpecial2(GameDataHolderAccessor);
    bool isWorldTypeMoon(GameDataHolderAccessor, int);
    bool isSnowMainScenario1(al::IUseSceneObjHolder const*);
    bool isSnowMainScenario2(al::IUseSceneObjHolder const*);
    bool isHomeShipStage(GameDataHolder const*);
    void getHomeShipStageName(void);
    bool isCityWorldCeremonyAgain(int, int);
    bool isGoToCeremonyFromInsideHomeShip(GameDataHolderAccessor);
    void registerScenarioStartCameraInfo(ScenarioStartCamera const*, int, al::CameraTicket*);
    bool isEnableExplainAmiibo(GameDataHolderAccessor);
    void endExplainAmiibo(GameDataHolderWriter);
    void startSearchHintByAmiibo(GameDataHolderWriter);
    void endSearchHintByAmiibo(GameDataHolderWriter);
    void setKidsModeOn(al::Scene const*);
    void setKidsModeOff(al::Scene const*);
    bool isCollectedBgm(GameDataHolderAccessor, char const*, char const*);
    void getCollectBgmByIndex(GameDataHolderAccessor, int);
    void trySetCollectedBgm(GameDataHolderWriter, char const*, char const*);
    void getCollectedBgmNum(GameDataHolderWriter);
    void registerShineInfo(GameDataHolderAccessor, ShineInfo const*, sead::Vector3<float> const&);
    void setHintTrans(GameDataHolderAccessor, int, sead::Vector3<float> const&);
    void resetHintTrans(GameDataHolderAccessor, int);
    bool isKoopaLv3(GameDataHolderAccessor);
}